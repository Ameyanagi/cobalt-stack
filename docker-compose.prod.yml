# Production environment
services:
  postgres:
    image: postgres:15-alpine
    container_name: cobalt-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-cobalt_prod}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}  # REQUIRED: Set via env
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - cobalt-prod-network
    # Do not expose port in production - use internal network only
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: cobalt-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}  # REQUIRED: Set via env
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - cobalt-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: cobalt-stack-backend:${IMAGE_TAG:-latest}
    container_name: cobalt-backend-prod
    restart: always
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-cobalt_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      PORT: 3000
      RUST_LOG: ${RUST_LOG:-info}
      JWT_SECRET: ${JWT_SECRET}  # REQUIRED: Set via env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cobalt-prod-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  cobalt-prod-network:
    driver: bridge
